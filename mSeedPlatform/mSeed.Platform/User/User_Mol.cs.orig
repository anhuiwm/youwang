using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


using mSeed.Common;
using mSeed.mDBTxnBlock;
using System.Data;
using System.Data.SqlClient;
using System.Xml;



using ServiceStack.Text;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Net;

using System.IO;
using System.Security.Cryptography;

/*
[2017_03_07 07:32:12.746] [Info (billing) : mol httpRequst: Uri = https://sandbox-api.mol.com/payout/payments]
[2017_03_07 07:32:12.746] [Info (billing) : mol httpRequst: dataParams = applicationCode=09CPNLtJ1IDNwpXTu8hC7Z3OnUPK8b7R&
 * referenceId=31ol_20170307_203135.595&amount=5000&currencyCode=USD&paymentId=2&returnUrl=120.92.227.117:11000&
 * version=v1&description=product&customerId=1544&signature=6a850601eff592c4ee2c2f125c62386b]
[2017_03_07 07:32:14.978] [Info (billing) : retBody= {"paymentId":"MPO399132","referenceId":"31ol_20170307_203135.595",
 * "paymentUrl":"https://sandbox-global.mol.com/PaymentWall/Checkout/index?token=qipDtsNLDSLY79hEORdluWRDsDc0%2f9HjMvLbw1yZ6MI0oGS7N0mifH%2b0anrxsLdtu2AlYeAVuw%2bLEtdL%2bGld04Xqwi2R7HwtqhJ9yHODd%2fgsgYbFQAr6AX9x%2by5V879a1i%2fWQQVJt%2brm2lgVqNly7Z0lt1BzPtdUQM%2boSKnF%2fJZO7linj53PylBsg2vPK2BxLPY%2bQdSjhIg%3d",
 * "amount":5000,"currencyCode":"USD","version":"v1","signature":"47974612beb3cc0016f0127a5f367526",
 * "applicationCode":"09CPNLtJ1IDNwpXTu8hC7Z3OnUPK8b7R"}]
 */

namespace mSeed.Platform
{
    public partial class UserManager
    {
        private const string molURL_IABVerify_SandBox = "https://sandbox-api.mol.com/payout/payments";//测试环境
        private const string molStoreURL_IABVerify_Product = "https://api.mol.com/payout/payments";//正式环境
        private const string molStoreValidatePurchaseJsonKey = "status";
        private const string molValidateContentsType = "application/json";


        public static Result_Define.eResult iOSMolIABVerify(ref JsonObject json ,string purchaseToken, bool isProduct, string appID, DateTime buyDate)
        {

            Result_Define.eResult retError = Result_Define.eResult.BILLING_TOKEN_INVALIDE;
            string Uri = molURL_IABVerify_SandBox;
            string SecretKey = "x9UmhiQgyfVhbMuqR8EU7w3lKrmh807o";
            string data = "5000" + "09CPNLtJ1IDNwpXTu8hC7Z3OnUPK8b7R" + "USD" + "1544" + "product" + purchaseToken + "120.92.227.117:11000" + "v1" + "x9UmhiQgyfVhbMuqR8EU7w3lKrmh807o";
            MD5 md5Hash = MD5.Create();
            string signature = MD5Tool.GetMd5Hash(md5Hash, data);


            string dataParams = "applicationCode=09CPNLtJ1IDNwpXTu8hC7Z3OnUPK8b7R" + "&referenceId=" + purchaseToken + "&amount=5000" +
                "&currencyCode=USD" + "&paymentId=2" + "&returnUrl=120.92.227.117:11000" + "&version=v1" + "&description=product" + "&customerId=1544" + "&signature=" + signature;

            mSeed.Common.mLogger.mLogger.Info(string.Format("mol httpRequst: Uri = {0}", Uri), "billing");
            mSeed.Common.mLogger.mLogger.Info(string.Format("mol httpRequst: dataParams = {0}", dataParams), "billing");

            string retBody = WebTools.GetReqeustURL(Uri, dataParams, true);
<<<<<<< HEAD
            mSeed.Common.mLogger.mLogger.Info(string.Format("retBody= {0}", retBody), "billing");

            if (string.IsNullOrEmpty(retBody))
            {
                mSeed.Common.mLogger.mLogger.Info(string.Format("IAB Fail - mol retBody Empty : token = {0}", purchaseToken), "billing");
=======
            if (string.IsNullOrEmpty(retBody))
            {
                /// error   
                retBody = "{\"paymentId\":\"MPO399132\",\"referenceId\":\"31ol_20170307_203135.595\",\"paymentUrl\":\"https://sandbox-global.mol.com/PaymentWall/Checkout/index?token=qipDtsNLDSLY79hEORdluWRDsDc0%2f9HjMvLbw1yZ6MI0oGS7N0mifH%2b0anrxsLdtu2AlYeAVuw%2bLEtdL%2bGld04Xqwi2R7HwtqhJ9yHODd%2fgsgYbFQAr6AX9x%2by5V879a1i%2fWQQVJt%2brm2lgVqNly7Z0lt1BzPtdUQM%2boSKnF%2fJZO7linj53PylBsg2vPK2BxLPY%2bQdSjhIg%3d\",\"amount\":5000,\"currencyCode\":\"USD\",\"version\":\"v1\",\"signature\":\"47974612beb3cc0016f0127a5f367526\",\"applicationCode\":\"09CPNLtJ1IDNwpXTu8hC7Z3OnUPK8b7R\"}";

                mSeed.Common.mLogger.mLogger.Info(string.Format("IAB Fail - mol retBody Empty : token = {0}", purchaseToken), "billing");       
>>>>>>> 10c9f09ec8eba773a42717d316fdd3597956bf83
                retError = Result_Define.eResult.BILLING_TOKEN_INVALIDE;
            }
            else
            {
<<<<<<< HEAD
              
                XmlDocument xml = new XmlDocument(); // XmlDocument 생성
                xml.LoadXml(retBody);

                XmlNodeList xnList = xml.GetElementsByTagName("result"); //접근할 노드

                mSeed.Common.mLogger.mLogger.Info("111111", "billing");

                XmlNode xn = xnList[0];
                mSeed.Common.mLogger.mLogger.Info("222222", "billing");
         
                string  paymentUr = xn["paymentUr"].InnerText;
                
                mSeed.Common.mLogger.mLogger.Info(string.Format("paymentUr= {0}", paymentUr), "billing");
                retError = Result_Define.eResult.SUCCESS;
                if (string.IsNullOrEmpty(paymentUr))
                {
                    mSeed.Common.mLogger.mLogger.Info(string.Format("IAB Fail - mol paymentUr fail token = {0}", purchaseToken), "billing");
=======
                try
                {
                    json = JsonObject.Parse(retBody);
                    string strpaymentUrl = string.Empty;
                    if (!json.TryGetValue("paymentUrl", out strpaymentUrl))
                    {
                        //json["paymentUrl"] = strpaymentUrl;
                        retError = Result_Define.eResult.SUCCESS;
                    }

                    return retError;
                }
                catch (Exception ex)
                {
                    JsonObject retJson = new JsonObject();
                    retJson["error"] = ex.Message;
>>>>>>> 10c9f09ec8eba773a42717d316fdd3597956bf83
                    retError = Result_Define.eResult.BILLING_TOKEN_INVALIDE;
                    return retError;
                }
<<<<<<< HEAD
                            
            }

=======

            //    XmlDocument xml = new XmlDocument(); // XmlDocument 생성
            //    xml.LoadXml(retBody);
            //    XmlNodeList xnList = xml.GetElementsByTagName("result"); //접근할 노드
            //    XmlNode xn = xnList[0];

            //    int statusCode = 0;
            //    int detailCode = 0;
            //    eOneStoreRequestState chkCode = (eOneStoreRequestState)int.Parse(xn["status"].InnerText);
            //    eOneStorePurchaseState chkDetail = (eOneStorePurchaseState)int.Parse(xn["detail"].InnerText);

            //    if (chkCode == eOneStoreRequestState.BILLING_RESPONSE_RESULT_OK)
            //    {
                            
            //        if (chkDetail != eOneStorePurchaseState.BILLING_RESPONSE_RESULT_OK)
            //        {
            //            //mSeed.Common.mLogger.mLogger.Info(string.Format("IAB Fail - mol tryDate {4} : token = {0}, code = {1}, detail = {2}, message = {3}", purchaseToken, statusCode, detailCode, xn["message"].InnerText, tryDate), "billing");
            //            retError = Result_Define.eResult.BILLING_TOKEN_INVALIDE;
            //        }
            //        else
            //        {
            //            // mSeed.Common.mLogger.mLogger.Info(string.Format("IAB Success - mol tryDate {3}  : token = {0}, code = {1}, detail = {2}", purchaseToken, statusCode, detailCode, tryDate), "billing");
            //            return Result_Define.eResult.SUCCESS;
            //        }
            //    }
            //    else
            //    {
            //        //mSeed.Common.mLogger.mLogger.Info(string.Format("IAB Fail - mol tryDate {4} : token = {0}, code = {1}, detail = {2}, message = {3}", purchaseToken, statusCode, detailCode, xn["message"].InnerText, tryDate), "billing");
            //        retError = Result_Define.eResult.BILLING_TOKEN_INVALIDE;
            //    }
            }
>>>>>>> 10c9f09ec8eba773a42717d316fdd3597956bf83
            return retError;
        }

    }
}

